items:
- uid: Testify.CharFactory
  id: CharFactory
  parent: Testify
  children:
  - Testify.CharFactory.CreateAlphaChar(Testify.IObjectFactory)
  - Testify.CharFactory.CreateAlphaChar(Testify.IObjectFactory,Testify.Distribution)
  - Testify.CharFactory.CreateAlphaNumericChar(Testify.IObjectFactory)
  - Testify.CharFactory.CreateAlphaNumericChar(Testify.IObjectFactory,Testify.Distribution)
  - Testify.CharFactory.CreateBasicLatinChar(Testify.IObjectFactory)
  - Testify.CharFactory.CreateBasicLatinChar(Testify.IObjectFactory,Testify.Distribution)
  - Testify.CharFactory.CreateChar(Testify.IObjectFactory)
  - Testify.CharFactory.CreateChar(Testify.IObjectFactory,System.Char,System.Char)
  - Testify.CharFactory.CreateChar(Testify.IObjectFactory,System.Char,System.Char,Testify.Distribution)
  - Testify.CharFactory.CreateChar(Testify.IObjectFactory,Testify.Distribution)
  - Testify.CharFactory.CreateLatinSupplementChar(Testify.IObjectFactory)
  - Testify.CharFactory.CreateLatinSupplementChar(Testify.IObjectFactory,Testify.Distribution)
  - Testify.CharFactory.CreateNumericChar(Testify.IObjectFactory)
  - Testify.CharFactory.CreateNumericChar(Testify.IObjectFactory,Testify.Distribution)
  - Testify.CharFactory.CreatePrintableChar(Testify.IObjectFactory)
  - Testify.CharFactory.CreatePrintableChar(Testify.IObjectFactory,Testify.Distribution)
  langs:
  - csharp
  - vb
  name: CharFactory
  fullName: Testify.CharFactory
  type: Class
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 5
  assemblies:
  - Testify
  namespace: Testify
  summary: Defines factory methods for creating <see langword="char" /> values.
  example: []
  syntax:
    content: public class CharFactory
    content.vb: Public Class CharFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Testify.CharFactory.CreateAlphaChar(Testify.IObjectFactory)
  id: CreateAlphaChar(Testify.IObjectFactory)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateAlphaChar(IObjectFactory)
  fullName: Testify.CharFactory.CreateAlphaChar(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 19
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of alpha characters using

    a uniform distribution algorithm.
  example: []
  syntax:
    content: public static char CreateAlphaChar(IObjectFactory factory)
    content.vb: Public Shared Function CreateAlphaChar(factory As IObjectFactory) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    return:
      type: System.Char
      description: A random alpha character.
- uid: Testify.CharFactory.CreateAlphaChar(Testify.IObjectFactory,Testify.Distribution)
  id: CreateAlphaChar(Testify.IObjectFactory,Testify.Distribution)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateAlphaChar(IObjectFactory, Distribution)
  fullName: Testify.CharFactory.CreateAlphaChar(Testify.IObjectFactory, Testify.Distribution)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 33
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of alpha characters using

    the specified distribution algorithm.
  example: []
  syntax:
    content: public static char CreateAlphaChar(IObjectFactory factory, Distribution distribution)
    content.vb: Public Shared Function CreateAlphaChar(factory As IObjectFactory, distribution As Distribution) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: distribution
      type: Testify.Distribution
      description: The distribution algorithm to use.
    return:
      type: System.Char
      description: A random alpha character.
- uid: Testify.CharFactory.CreateAlphaNumericChar(Testify.IObjectFactory)
  id: CreateAlphaNumericChar(Testify.IObjectFactory)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateAlphaNumericChar(IObjectFactory)
  fullName: Testify.CharFactory.CreateAlphaNumericChar(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 47
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of alpha/numeric characters

    using a uniform distribution algorithm.
  example: []
  syntax:
    content: public static char CreateAlphaNumericChar(IObjectFactory factory)
    content.vb: Public Shared Function CreateAlphaNumericChar(factory As IObjectFactory) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    return:
      type: System.Char
      description: A random <see langword="char" /> value.
- uid: Testify.CharFactory.CreateAlphaNumericChar(Testify.IObjectFactory,Testify.Distribution)
  id: CreateAlphaNumericChar(Testify.IObjectFactory,Testify.Distribution)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateAlphaNumericChar(IObjectFactory, Distribution)
  fullName: Testify.CharFactory.CreateAlphaNumericChar(Testify.IObjectFactory, Testify.Distribution)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 61
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of alpha/numeric characters

    using the specified distribution algorithm.
  example: []
  syntax:
    content: public static char CreateAlphaNumericChar(IObjectFactory factory, Distribution distribution)
    content.vb: Public Shared Function CreateAlphaNumericChar(factory As IObjectFactory, distribution As Distribution) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: distribution
      type: Testify.Distribution
      description: The distribution algorithm to use.
    return:
      type: System.Char
      description: A random alpha/numeric character.
- uid: Testify.CharFactory.CreateBasicLatinChar(Testify.IObjectFactory)
  id: CreateBasicLatinChar(Testify.IObjectFactory)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateBasicLatinChar(IObjectFactory)
  fullName: Testify.CharFactory.CreateBasicLatinChar(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 75
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of basic Latin characters using

    a uniform distribution algorithm.
  example: []
  syntax:
    content: public static char CreateBasicLatinChar(IObjectFactory factory)
    content.vb: Public Shared Function CreateBasicLatinChar(factory As IObjectFactory) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    return:
      type: System.Char
      description: A random basic Latin character.
- uid: Testify.CharFactory.CreateBasicLatinChar(Testify.IObjectFactory,Testify.Distribution)
  id: CreateBasicLatinChar(Testify.IObjectFactory,Testify.Distribution)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateBasicLatinChar(IObjectFactory, Distribution)
  fullName: Testify.CharFactory.CreateBasicLatinChar(Testify.IObjectFactory, Testify.Distribution)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 89
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of basic Latin characters using

    the specified distribution algorithm.
  example: []
  syntax:
    content: public static char CreateBasicLatinChar(IObjectFactory factory, Distribution distribution)
    content.vb: Public Shared Function CreateBasicLatinChar(factory As IObjectFactory, distribution As Distribution) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: distribution
      type: Testify.Distribution
      description: The distribution algorithm to use.
    return:
      type: System.Char
      description: A random basic Latin character.
- uid: Testify.CharFactory.CreateChar(Testify.IObjectFactory)
  id: CreateChar(Testify.IObjectFactory)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateChar(IObjectFactory)
  fullName: Testify.CharFactory.CreateChar(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 102
  assemblies:
  - Testify
  namespace: Testify
  summary: Creates a random <see langword="char" /> value using a uniform distribution algorithm.
  example: []
  syntax:
    content: public static char CreateChar(IObjectFactory factory)
    content.vb: Public Shared Function CreateChar(factory As IObjectFactory) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    return:
      type: System.Char
      description: A random <see langword="char" /> value.
- uid: Testify.CharFactory.CreateChar(Testify.IObjectFactory,System.Char,System.Char)
  id: CreateChar(Testify.IObjectFactory,System.Char,System.Char)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateChar(IObjectFactory, Char, Char)
  fullName: Testify.CharFactory.CreateChar(Testify.IObjectFactory, System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 117
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the specified range using a uniform

    distribution algorithm.
  example: []
  syntax:
    content: public static char CreateChar(IObjectFactory factory, char minimum, char maximum)
    content.vb: Public Shared Function CreateChar(factory As IObjectFactory, minimum As Char, maximum As Char) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: minimum
      type: System.Char
      description: The minimum value.
    - id: maximum
      type: System.Char
      description: The maximum value.
    return:
      type: System.Char
      description: A random <see langword="char" /> value.
- uid: Testify.CharFactory.CreateChar(Testify.IObjectFactory,Testify.Distribution)
  id: CreateChar(Testify.IObjectFactory,Testify.Distribution)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateChar(IObjectFactory, Distribution)
  fullName: Testify.CharFactory.CreateChar(Testify.IObjectFactory, Testify.Distribution)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 131
  assemblies:
  - Testify
  namespace: Testify
  summary: Creates a random <see langword="char" /> value using the specified distribution algorithm.
  example: []
  syntax:
    content: public static char CreateChar(IObjectFactory factory, Distribution distribution)
    content.vb: Public Shared Function CreateChar(factory As IObjectFactory, distribution As Distribution) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: distribution
      type: Testify.Distribution
      description: The distribution algorithm to use.
    return:
      type: System.Char
      description: A random <see langword="char" /> value.
- uid: Testify.CharFactory.CreateChar(Testify.IObjectFactory,System.Char,System.Char,Testify.Distribution)
  id: CreateChar(Testify.IObjectFactory,System.Char,System.Char,Testify.Distribution)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateChar(IObjectFactory, Char, Char, Distribution)
  fullName: Testify.CharFactory.CreateChar(Testify.IObjectFactory, System.Char, System.Char, Testify.Distribution)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 148
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the specified range using the specified

    distribution algorithm.
  example: []
  syntax:
    content: public static char CreateChar(IObjectFactory factory, char minimum, char maximum, Distribution distribution)
    content.vb: Public Shared Function CreateChar(factory As IObjectFactory, minimum As Char, maximum As Char, distribution As Distribution) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: minimum
      type: System.Char
      description: The minimum value.
    - id: maximum
      type: System.Char
      description: The maximum value.
    - id: distribution
      type: Testify.Distribution
      description: The distribution algorithm to use.
    return:
      type: System.Char
      description: A random <see langword="char" /> value.
- uid: Testify.CharFactory.CreateLatinSupplementChar(Testify.IObjectFactory)
  id: CreateLatinSupplementChar(Testify.IObjectFactory)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateLatinSupplementChar(IObjectFactory)
  fullName: Testify.CharFactory.CreateLatinSupplementChar(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 163
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of Latin supplement characters

    using a uniform distribution algorithm.
  example: []
  syntax:
    content: public static char CreateLatinSupplementChar(IObjectFactory factory)
    content.vb: Public Shared Function CreateLatinSupplementChar(factory As IObjectFactory) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    return:
      type: System.Char
      description: A random Latin supplement character.
- uid: Testify.CharFactory.CreateLatinSupplementChar(Testify.IObjectFactory,Testify.Distribution)
  id: CreateLatinSupplementChar(Testify.IObjectFactory,Testify.Distribution)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateLatinSupplementChar(IObjectFactory, Distribution)
  fullName: Testify.CharFactory.CreateLatinSupplementChar(Testify.IObjectFactory, Testify.Distribution)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 177
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of Latin supplement characters

    using the specified distribution algorithm.
  example: []
  syntax:
    content: public static char CreateLatinSupplementChar(IObjectFactory factory, Distribution distribution)
    content.vb: Public Shared Function CreateLatinSupplementChar(factory As IObjectFactory, distribution As Distribution) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: distribution
      type: Testify.Distribution
      description: The distribution algorithm to use.
    return:
      type: System.Char
      description: A random Latin supplement character.
- uid: Testify.CharFactory.CreateNumericChar(Testify.IObjectFactory)
  id: CreateNumericChar(Testify.IObjectFactory)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateNumericChar(IObjectFactory)
  fullName: Testify.CharFactory.CreateNumericChar(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 191
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of numeric characters using

    a uniform distribution algorithm.
  example: []
  syntax:
    content: public static char CreateNumericChar(IObjectFactory factory)
    content.vb: Public Shared Function CreateNumericChar(factory As IObjectFactory) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    return:
      type: System.Char
      description: A random numeric character.
- uid: Testify.CharFactory.CreateNumericChar(Testify.IObjectFactory,Testify.Distribution)
  id: CreateNumericChar(Testify.IObjectFactory,Testify.Distribution)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreateNumericChar(IObjectFactory, Distribution)
  fullName: Testify.CharFactory.CreateNumericChar(Testify.IObjectFactory, Testify.Distribution)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 205
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of numeric characters using

    the specified distribution algorithm.
  example: []
  syntax:
    content: public static char CreateNumericChar(IObjectFactory factory, Distribution distribution)
    content.vb: Public Shared Function CreateNumericChar(factory As IObjectFactory, distribution As Distribution) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: distribution
      type: Testify.Distribution
      description: The distribution algorithm to use.
    return:
      type: System.Char
      description: A random numeric character.
- uid: Testify.CharFactory.CreatePrintableChar(Testify.IObjectFactory)
  id: CreatePrintableChar(Testify.IObjectFactory)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreatePrintableChar(IObjectFactory)
  fullName: Testify.CharFactory.CreatePrintableChar(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 219
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of printable characters

    using a uniform distribution algorithm.
  example: []
  syntax:
    content: public static char CreatePrintableChar(IObjectFactory factory)
    content.vb: Public Shared Function CreatePrintableChar(factory As IObjectFactory) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    return:
      type: System.Char
      description: A random printable character.
- uid: Testify.CharFactory.CreatePrintableChar(Testify.IObjectFactory,Testify.Distribution)
  id: CreatePrintableChar(Testify.IObjectFactory,Testify.Distribution)
  parent: Testify.CharFactory
  langs:
  - csharp
  - vb
  name: CreatePrintableChar(IObjectFactory, Distribution)
  fullName: Testify.CharFactory.CreatePrintableChar(Testify.IObjectFactory, Testify.Distribution)
  type: Method
  source:
    remote:
      path: src/Testify/CharFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/CharFactory.cs
    startLine: 233
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Creates a random <see langword="char" /> value within the range of printable characters

    using the specified distribution algorithm.
  example: []
  syntax:
    content: public static char CreatePrintableChar(IObjectFactory factory, Distribution distribution)
    content.vb: Public Shared Function CreatePrintableChar(factory As IObjectFactory, distribution As Distribution) As Char
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: distribution
      type: Testify.Distribution
      description: The distribution algorithm to use.
    return:
      type: System.Char
      description: A random printable character.
references:
- uid: Testify
  isExternal: false
  name: Testify
  fullName: Testify
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Testify.IObjectFactory
  parent: Testify
  isExternal: false
  name: IObjectFactory
  fullName: Testify.IObjectFactory
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  fullName: System.Char
- uid: Testify.Distribution
  parent: Testify
  isExternal: false
  name: Distribution
  fullName: Testify.Distribution
