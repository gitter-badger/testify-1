items:
- uid: Testify.ObjectFactoryExtensions
  id: ObjectFactoryExtensions
  parent: Testify
  children:
  - Testify.ObjectFactoryExtensions.Create``1(Testify.IObjectFactory)
  - Testify.ObjectFactoryExtensions.Freeze(Testify.IRegisterObjectFactory,System.Type,System.Object)
  - Testify.ObjectFactoryExtensions.Freeze``1(Testify.IRegisterObjectFactory,``0)
  - Testify.ObjectFactoryExtensions.Register``1(Testify.IRegisterObjectFactory,System.Func{Testify.IObjectFactory,``0})
  langs:
  - csharp
  - vb
  name: ObjectFactoryExtensions
  fullName: Testify.ObjectFactoryExtensions
  type: Class
  source:
    remote:
      path: src/Testify/ObjectFactoryExtensions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ObjectFactoryExtensions.cs
    startLine: 8
  assemblies:
  - Testify
  namespace: Testify
  summary: Extension methods for <xref href="Testify.ObjectFactory" data-throw-if-not-resolved="false"></xref> use.
  example: []
  syntax:
    content: public class ObjectFactoryExtensions
    content.vb: Public Class ObjectFactoryExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Testify.ObjectFactoryExtensions.Create``1(Testify.IObjectFactory)
  id: Create``1(Testify.IObjectFactory)
  parent: Testify.ObjectFactoryExtensions
  langs:
  - csharp
  - vb
  name: Create<T>(IObjectFactory)
  name.vb: Create(Of T)(IObjectFactory)
  fullName: Testify.ObjectFactoryExtensions.Create<T>(Testify.IObjectFactory)
  fullName.vb: Testify.ObjectFactoryExtensions.Create(Of T)(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/ObjectFactoryExtensions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ObjectFactoryExtensions.cs
    startLine: 16
  assemblies:
  - Testify
  namespace: Testify
  summary: Creates an object of the specified type.
  example: []
  syntax:
    content: public static T Create<T>(IObjectFactory self)
    content.vb: Public Shared Function Create(Of T)(self As IObjectFactory) As T
    parameters:
    - id: self
      type: Testify.IObjectFactory
      description: The factory instance.
    typeParameters:
    - id: T
      description: The type of the object to create.
    return:
      type: '{T}'
      description: An instance of the specified type.
- uid: Testify.ObjectFactoryExtensions.Freeze(Testify.IRegisterObjectFactory,System.Type,System.Object)
  id: Freeze(Testify.IRegisterObjectFactory,System.Type,System.Object)
  parent: Testify.ObjectFactoryExtensions
  langs:
  - csharp
  - vb
  name: Freeze(IRegisterObjectFactory, Type, Object)
  fullName: Testify.ObjectFactoryExtensions.Freeze(Testify.IRegisterObjectFactory, System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/Testify/ObjectFactoryExtensions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ObjectFactoryExtensions.cs
    startLine: 33
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Freezes the specified value as the result for any further calls to <xref href="Testify.ObjectFactoryExtensions.Create``1(Testify.IObjectFactory)" data-throw-if-not-resolved="false"></xref>

    for the specified type.
  example: []
  syntax:
    content: public static void Freeze(IRegisterObjectFactory self, Type type, object value)
    content.vb: Public Shared Sub Freeze(self As IRegisterObjectFactory, type As Type, value As Object)
    parameters:
    - id: self
      type: Testify.IRegisterObjectFactory
      description: The factory instance.
    - id: type
      type: System.Type
      description: The type to freeze.
    - id: value
      type: System.Object
      description: The instance to freeze.
- uid: Testify.ObjectFactoryExtensions.Freeze``1(Testify.IRegisterObjectFactory,``0)
  id: Freeze``1(Testify.IRegisterObjectFactory,``0)
  parent: Testify.ObjectFactoryExtensions
  langs:
  - csharp
  - vb
  name: Freeze<T>(IRegisterObjectFactory, T)
  name.vb: Freeze(Of T)(IRegisterObjectFactory, T)
  fullName: Testify.ObjectFactoryExtensions.Freeze<T>(Testify.IRegisterObjectFactory, T)
  fullName.vb: Testify.ObjectFactoryExtensions.Freeze(Of T)(Testify.IRegisterObjectFactory, T)
  type: Method
  source:
    remote:
      path: src/Testify/ObjectFactoryExtensions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ObjectFactoryExtensions.cs
    startLine: 60
  assemblies:
  - Testify
  namespace: Testify
  summary: >-
    Freezes the specified value as the result for any further calls to <xref href="Testify.ObjectFactoryExtensions.Create``1(Testify.IObjectFactory)" data-throw-if-not-resolved="false"></xref>

    for the specified type.
  example: []
  syntax:
    content: public static void Freeze<T>(IRegisterObjectFactory self, T value)
    content.vb: Public Shared Sub Freeze(Of T)(self As IRegisterObjectFactory, value As T)
    parameters:
    - id: self
      type: Testify.IRegisterObjectFactory
      description: The factory instance.
    - id: value
      type: '{T}'
      description: The instance to freeze.
    typeParameters:
    - id: T
      description: The type to freeze.
- uid: Testify.ObjectFactoryExtensions.Register``1(Testify.IRegisterObjectFactory,System.Func{Testify.IObjectFactory,``0})
  id: Register``1(Testify.IRegisterObjectFactory,System.Func{Testify.IObjectFactory,``0})
  parent: Testify.ObjectFactoryExtensions
  langs:
  - csharp
  - vb
  name: Register<T>(IRegisterObjectFactory, Func<IObjectFactory, T>)
  name.vb: Register(Of T)(IRegisterObjectFactory, Func(Of IObjectFactory, T))
  fullName: Testify.ObjectFactoryExtensions.Register<T>(Testify.IRegisterObjectFactory, System.Func<Testify.IObjectFactory, T>)
  fullName.vb: Testify.ObjectFactoryExtensions.Register(Of T)(Testify.IRegisterObjectFactory, System.Func(Of Testify.IObjectFactory, T))
  type: Method
  source:
    remote:
      path: src/Testify/ObjectFactoryExtensions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ObjectFactoryExtensions.cs
    startLine: 76
  assemblies:
  - Testify
  namespace: Testify
  summary: Register a factory method for the specified type.
  example: []
  syntax:
    content: public static void Register<T>(IRegisterObjectFactory self, Func<IObjectFactory, T> factory)
    content.vb: Public Shared Sub Register(Of T)(self As IRegisterObjectFactory, factory As Func(Of IObjectFactory, T))
    parameters:
    - id: self
      type: Testify.IRegisterObjectFactory
      description: The factory instance.
    - id: factory
      type: System.Func{Testify.IObjectFactory,{T}}
      description: The factory method.
    typeParameters:
    - id: T
      description: The type of object the factory method creates.
references:
- uid: Testify.ObjectFactory
  parent: Testify
  isExternal: false
  name: ObjectFactory
  fullName: Testify.ObjectFactory
- uid: Testify
  isExternal: false
  name: Testify
  fullName: Testify
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Testify.IObjectFactory
  parent: Testify
  isExternal: false
  name: IObjectFactory
  fullName: Testify.IObjectFactory
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: Testify.ObjectFactoryExtensions.Create``1(Testify.IObjectFactory)
- uid: Testify.IRegisterObjectFactory
  parent: Testify
  isExternal: false
  name: IRegisterObjectFactory
  fullName: Testify.IRegisterObjectFactory
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  fullName: System.Type
- uid: System.Func{Testify.IObjectFactory,{T}}
  parent: System
  definition: System.Func`2
  name: Func<IObjectFactory, T>
  fullName: System.Func<Testify.IObjectFactory, T>
  fullname.vb: System.Func(Of Testify.IObjectFactory, T)
  name.vb: Func(Of IObjectFactory, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: Testify.IObjectFactory
    name: IObjectFactory
    fullName: Testify.IObjectFactory
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Testify.IObjectFactory
    name: IObjectFactory
    fullName: Testify.IObjectFactory
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: true
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
