items:
- uid: Testify.EnumerableFactory
  id: EnumerableFactory
  parent: Testify
  children:
  - Testify.EnumerableFactory.CreateEnumerable(Testify.IObjectFactory,System.Type)
  - Testify.EnumerableFactory.CreateEnumerable(Testify.IObjectFactory,System.Type,System.Int32,System.Int32)
  - Testify.EnumerableFactory.CreateEnumerable``1(Testify.IObjectFactory)
  - Testify.EnumerableFactory.CreateEnumerable``1(Testify.IObjectFactory,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: EnumerableFactory
  fullName: Testify.EnumerableFactory
  type: Class
  source:
    remote:
      path: src/Testify/EnumerableFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/EnumerableFactory.cs
    startLine: 10
  assemblies:
  - Testify
  namespace: Testify
  summary: Defines factory methods for creating <see langword="IEnumerable" /> values.
  example: []
  syntax:
    content: public class EnumerableFactory
    content.vb: Public Class EnumerableFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Testify.EnumerableFactory.CreateEnumerable(Testify.IObjectFactory,System.Type)
  id: CreateEnumerable(Testify.IObjectFactory,System.Type)
  parent: Testify.EnumerableFactory
  langs:
  - csharp
  - vb
  name: CreateEnumerable(IObjectFactory, Type)
  fullName: Testify.EnumerableFactory.CreateEnumerable(Testify.IObjectFactory, System.Type)
  type: Method
  source:
    remote:
      path: src/Testify/EnumerableFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/EnumerableFactory.cs
    startLine: 18
  assemblies:
  - Testify
  namespace: Testify
  summary: Creates a random <see langword="IEnumerable" /> sequence of 0 to 20 objects of the specified type.
  example: []
  syntax:
    content: public static IEnumerable CreateEnumerable(IObjectFactory factory, Type type)
    content.vb: Public Shared Function CreateEnumerable(factory As IObjectFactory, type As Type) As IEnumerable
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: type
      type: System.Type
      description: The type of objects to create.
    return:
      type: System.Collections.IEnumerable
      description: A random <see langword="IEnumerable" /> sequence of the specified type of objects.
- uid: Testify.EnumerableFactory.CreateEnumerable(Testify.IObjectFactory,System.Type,System.Int32,System.Int32)
  id: CreateEnumerable(Testify.IObjectFactory,System.Type,System.Int32,System.Int32)
  parent: Testify.EnumerableFactory
  langs:
  - csharp
  - vb
  name: CreateEnumerable(IObjectFactory, Type, Int32, Int32)
  fullName: Testify.EnumerableFactory.CreateEnumerable(Testify.IObjectFactory, System.Type, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Testify/EnumerableFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/EnumerableFactory.cs
    startLine: 34
  assemblies:
  - Testify
  namespace: Testify
  summary: Creates a random <see langword="IEnumerable" /> sequence of objects of the specified type.
  example: []
  syntax:
    content: public static IEnumerable CreateEnumerable(IObjectFactory factory, Type type, int minimumLength, int maximumLength)
    content.vb: Public Shared Function CreateEnumerable(factory As IObjectFactory, type As Type, minimumLength As Integer, maximumLength As Integer) As IEnumerable
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: type
      type: System.Type
      description: The type of objects to create.
    - id: minimumLength
      type: System.Int32
      description: The minimum length of the sequence.
    - id: maximumLength
      type: System.Int32
      description: The maximum length of the sequence.
    return:
      type: System.Collections.IEnumerable
      description: A random <see langword="IEnumerable" /> sequence of the specified type of objects.
- uid: Testify.EnumerableFactory.CreateEnumerable``1(Testify.IObjectFactory)
  id: CreateEnumerable``1(Testify.IObjectFactory)
  parent: Testify.EnumerableFactory
  langs:
  - csharp
  - vb
  name: CreateEnumerable<T>(IObjectFactory)
  name.vb: CreateEnumerable(Of T)(IObjectFactory)
  fullName: Testify.EnumerableFactory.CreateEnumerable<T>(Testify.IObjectFactory)
  fullName.vb: Testify.EnumerableFactory.CreateEnumerable(Of T)(Testify.IObjectFactory)
  type: Method
  source:
    remote:
      path: src/Testify/EnumerableFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/EnumerableFactory.cs
    startLine: 50
  assemblies:
  - Testify
  namespace: Testify
  summary: Creates a random <see langword="IEnumerable{T}" /> sequence of 0 to 20 objects of the specified type.
  example: []
  syntax:
    content: public static IEnumerable<T> CreateEnumerable<T>(IObjectFactory factory)
    content.vb: Public Shared Function CreateEnumerable(Of T)(factory As IObjectFactory) As IEnumerable(Of T)
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    typeParameters:
    - id: T
      description: The type of objects to create.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A random <see langword="IEnumerable{T}" /> sequence of the specified type of objects.
- uid: Testify.EnumerableFactory.CreateEnumerable``1(Testify.IObjectFactory,System.Int32,System.Int32)
  id: CreateEnumerable``1(Testify.IObjectFactory,System.Int32,System.Int32)
  parent: Testify.EnumerableFactory
  langs:
  - csharp
  - vb
  name: CreateEnumerable<T>(IObjectFactory, Int32, Int32)
  name.vb: CreateEnumerable(Of T)(IObjectFactory, Int32, Int32)
  fullName: Testify.EnumerableFactory.CreateEnumerable<T>(Testify.IObjectFactory, System.Int32, System.Int32)
  fullName.vb: Testify.EnumerableFactory.CreateEnumerable(Of T)(Testify.IObjectFactory, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Testify/EnumerableFactory.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/EnumerableFactory.cs
    startLine: 65
  assemblies:
  - Testify
  namespace: Testify
  summary: Creates a random <see langword="IEnumerable{T}" /> sequence of objects of the specified type.
  example: []
  syntax:
    content: public static IEnumerable<T> CreateEnumerable<T>(IObjectFactory factory, int minimumLength, int maximumLength)
    content.vb: Public Shared Function CreateEnumerable(Of T)(factory As IObjectFactory, minimumLength As Integer, maximumLength As Integer) As IEnumerable(Of T)
    parameters:
    - id: factory
      type: Testify.IObjectFactory
      description: The factory instance.
    - id: minimumLength
      type: System.Int32
      description: The minimum length of the sequence.
    - id: maximumLength
      type: System.Int32
      description: The maximum length of the sequence.
    typeParameters:
    - id: T
      description: The type of objects to create.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A random <see langword="IEnumerable{T}" /> sequence of the specified type of objects.
references:
- uid: Testify
  isExternal: false
  name: Testify
  fullName: Testify
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Testify.IObjectFactory
  parent: Testify
  isExternal: false
  name: IObjectFactory
  fullName: Testify.IObjectFactory
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  fullName: System.Type
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
