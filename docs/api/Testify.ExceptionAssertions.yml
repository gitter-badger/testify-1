items:
- uid: Testify.ExceptionAssertions
  id: ExceptionAssertions
  parent: Testify
  children:
  - Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action})
  - Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.Action{``0})
  - Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.Action{``0},System.String)
  - Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.Action{``0},System.String,System.Object[])
  - Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.String)
  - Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: ExceptionAssertions
  fullName: Testify.ExceptionAssertions
  type: Class
  source:
    remote:
      path: src/Testify/ExceptionAssertions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ExceptionAssertions.cs
    startLine: 7
  assemblies:
  - Testify
  namespace: Testify
  summary: Provides assertions for exceptions.
  example: []
  syntax:
    content: public class ExceptionAssertions
    content.vb: Public Class ExceptionAssertions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action})
  id: Throws``1(Testify.ActualValue{System.Action})
  parent: Testify.ExceptionAssertions
  langs:
  - csharp
  - vb
  name: Throws<T>(ActualValue<Action>)
  name.vb: Throws(Of T)(ActualValue(Of Action))
  fullName: Testify.ExceptionAssertions.Throws<T>(Testify.ActualValue<System.Action>)
  fullName.vb: Testify.ExceptionAssertions.Throws(Of T)(Testify.ActualValue(Of System.Action))
  type: Method
  source:
    remote:
      path: src/Testify/ExceptionAssertions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ExceptionAssertions.cs
    startLine: 14
  assemblies:
  - Testify
  namespace: Testify
  summary: Verifies that the specified action throws a specific exception type.
  example: []
  syntax:
    content: 'public static void Throws<T>(ActualValue<Action> action)where T : Exception'
    content.vb: Public Shared Sub Throws(Of T As Exception)(action As ActualValue(Of Action))
    parameters:
    - id: action
      type: Testify.ActualValue{System.Action}
      description: The exception.
    typeParameters:
    - id: T
      description: The exception type.
- uid: Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.Action{``0})
  id: Throws``1(Testify.ActualValue{System.Action},System.Action{``0})
  parent: Testify.ExceptionAssertions
  langs:
  - csharp
  - vb
  name: Throws<T>(ActualValue<Action>, Action<T>)
  name.vb: Throws(Of T)(ActualValue(Of Action), Action(Of T))
  fullName: Testify.ExceptionAssertions.Throws<T>(Testify.ActualValue<System.Action>, System.Action<T>)
  fullName.vb: Testify.ExceptionAssertions.Throws(Of T)(Testify.ActualValue(Of System.Action), System.Action(Of T))
  type: Method
  source:
    remote:
      path: src/Testify/ExceptionAssertions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ExceptionAssertions.cs
    startLine: 26
  assemblies:
  - Testify
  namespace: Testify
  summary: Verifies that the specified action throws a specific exception type.
  example: []
  syntax:
    content: 'public static void Throws<T>(ActualValue<Action> action, Action<T> additionalAssertion)where T : Exception'
    content.vb: Public Shared Sub Throws(Of T As Exception)(action As ActualValue(Of Action), additionalAssertion As Action(Of T))
    parameters:
    - id: action
      type: Testify.ActualValue{System.Action}
      description: The exception.
    - id: additionalAssertion
      type: System.Action{{T}}
      description: The additional assertion.
    typeParameters:
    - id: T
      description: The exception type.
- uid: Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.String)
  id: Throws``1(Testify.ActualValue{System.Action},System.String)
  parent: Testify.ExceptionAssertions
  langs:
  - csharp
  - vb
  name: Throws<T>(ActualValue<Action>, String)
  name.vb: Throws(Of T)(ActualValue(Of Action), String)
  fullName: Testify.ExceptionAssertions.Throws<T>(Testify.ActualValue<System.Action>, System.String)
  fullName.vb: Testify.ExceptionAssertions.Throws(Of T)(Testify.ActualValue(Of System.Action), System.String)
  type: Method
  source:
    remote:
      path: src/Testify/ExceptionAssertions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ExceptionAssertions.cs
    startLine: 39
  assemblies:
  - Testify
  namespace: Testify
  summary: Verifies that the specified action throws a specific exception type.
  example: []
  syntax:
    content: 'public static void Throws<T>(ActualValue<Action> action, string message)where T : Exception'
    content.vb: Public Shared Sub Throws(Of T As Exception)(action As ActualValue(Of Action), message As String)
    parameters:
    - id: action
      type: Testify.ActualValue{System.Action}
      description: The exception.
    - id: message
      type: System.String
      description: >-
        A message to display if the assertion fails. This message can

        be seen in the unit test results.
    typeParameters:
    - id: T
      description: The exception type.
- uid: Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.Action{``0},System.String)
  id: Throws``1(Testify.ActualValue{System.Action},System.Action{``0},System.String)
  parent: Testify.ExceptionAssertions
  langs:
  - csharp
  - vb
  name: Throws<T>(ActualValue<Action>, Action<T>, String)
  name.vb: Throws(Of T)(ActualValue(Of Action), Action(Of T), String)
  fullName: Testify.ExceptionAssertions.Throws<T>(Testify.ActualValue<System.Action>, System.Action<T>, System.String)
  fullName.vb: Testify.ExceptionAssertions.Throws(Of T)(Testify.ActualValue(Of System.Action), System.Action(Of T), System.String)
  type: Method
  source:
    remote:
      path: src/Testify/ExceptionAssertions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ExceptionAssertions.cs
    startLine: 53
  assemblies:
  - Testify
  namespace: Testify
  summary: Verifies that the specified action throws a specific exception type.
  example: []
  syntax:
    content: 'public static void Throws<T>(ActualValue<Action> action, Action<T> additionalAssertion, string message)where T : Exception'
    content.vb: Public Shared Sub Throws(Of T As Exception)(action As ActualValue(Of Action), additionalAssertion As Action(Of T), message As String)
    parameters:
    - id: action
      type: Testify.ActualValue{System.Action}
      description: The exception.
    - id: additionalAssertion
      type: System.Action{{T}}
      description: The additional assertion.
    - id: message
      type: System.String
      description: >-
        A message to display if the assertion fails. This message can

        be seen in the unit test results.
    typeParameters:
    - id: T
      description: The exception type.
- uid: Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.String,System.Object[])
  id: Throws``1(Testify.ActualValue{System.Action},System.String,System.Object[])
  parent: Testify.ExceptionAssertions
  langs:
  - csharp
  - vb
  name: Throws<T>(ActualValue<Action>, String, Object[])
  name.vb: Throws(Of T)(ActualValue(Of Action), String, Object())
  fullName: Testify.ExceptionAssertions.Throws<T>(Testify.ActualValue<System.Action>, System.String, System.Object[])
  fullName.vb: Testify.ExceptionAssertions.Throws(Of T)(Testify.ActualValue(Of System.Action), System.String, System.Object())
  type: Method
  source:
    remote:
      path: src/Testify/ExceptionAssertions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ExceptionAssertions.cs
    startLine: 67
  assemblies:
  - Testify
  namespace: Testify
  summary: Verifies that the specified action throws a specific exception type.
  example: []
  syntax:
    content: 'public static void Throws<T>(ActualValue<Action> action, string message, params object[] parameters)where T : Exception'
    content.vb: Public Shared Sub Throws(Of T As Exception)(action As ActualValue(Of Action), message As String, ParamArray parameters As Object())
    parameters:
    - id: action
      type: Testify.ActualValue{System.Action}
      description: The exception.
    - id: message
      type: System.String
      description: >-
        A message to display if the assertion fails. This message can

        be seen in the unit test results.
    - id: parameters
      type: System.Object[]
      description: An array of parameters to use when formatting *message*.
    typeParameters:
    - id: T
      description: The exception type.
- uid: Testify.ExceptionAssertions.Throws``1(Testify.ActualValue{System.Action},System.Action{``0},System.String,System.Object[])
  id: Throws``1(Testify.ActualValue{System.Action},System.Action{``0},System.String,System.Object[])
  parent: Testify.ExceptionAssertions
  langs:
  - csharp
  - vb
  name: Throws<T>(ActualValue<Action>, Action<T>, String, Object[])
  name.vb: Throws(Of T)(ActualValue(Of Action), Action(Of T), String, Object())
  fullName: Testify.ExceptionAssertions.Throws<T>(Testify.ActualValue<System.Action>, System.Action<T>, System.String, System.Object[])
  fullName.vb: Testify.ExceptionAssertions.Throws(Of T)(Testify.ActualValue(Of System.Action), System.Action(Of T), System.String, System.Object())
  type: Method
  source:
    remote:
      path: src/Testify/ExceptionAssertions.cs
      branch: feature/documentation
      repo: git@github.com:wekempf/testify.git
    path: src/Testify/ExceptionAssertions.cs
    startLine: 82
  assemblies:
  - Testify
  namespace: Testify
  summary: Verifies that the specified action throws a specific exception type.
  example: []
  syntax:
    content: 'public static void Throws<T>(ActualValue<Action> action, Action<T> additionalAssertion, string message, params object[] parameters)where T : Exception'
    content.vb: Public Shared Sub Throws(Of T As Exception)(action As ActualValue(Of Action), additionalAssertion As Action(Of T), message As String, ParamArray parameters As Object())
    parameters:
    - id: action
      type: Testify.ActualValue{System.Action}
      description: The exception.
    - id: additionalAssertion
      type: System.Action{{T}}
      description: The additional assertion.
    - id: message
      type: System.String
      description: >-
        A message to display if the assertion fails. This message can

        be seen in the unit test results.
    - id: parameters
      type: System.Object[]
      description: An array of parameters to use when formatting *message*.
    typeParameters:
    - id: T
      description: The exception type.
references:
- uid: Testify
  isExternal: false
  name: Testify
  fullName: Testify
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Testify.ActualValue{System.Action}
  parent: Testify
  definition: Testify.ActualValue`1
  name: ActualValue<Action>
  fullName: Testify.ActualValue<System.Action>
  fullname.vb: Testify.ActualValue(Of System.Action)
  name.vb: ActualValue(Of Action)
  spec.csharp:
  - uid: Testify.ActualValue`1
    name: ActualValue
    fullName: Testify.ActualValue
  - name: <
    fullName: <
  - uid: System.Action
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Testify.ActualValue`1
    name: ActualValue
    fullName: Testify.ActualValue
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Action
    name: Action
    fullName: System.Action
    isExternal: true
  - name: )
    fullName: )
- uid: Testify.ActualValue`1
  parent: Testify
  isExternal: false
  name: ActualValue<T>
  fullName: Testify.ActualValue<T>
  fullname.vb: Testify.ActualValue(Of T)
  name.vb: ActualValue(Of T)
  spec.csharp:
  - uid: Testify.ActualValue`1
    name: ActualValue
    fullName: Testify.ActualValue
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Testify.ActualValue`1
    name: ActualValue
    fullName: Testify.ActualValue
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Action{{T}}
  parent: System
  definition: System.Action`1
  name: Action<T>
  fullName: System.Action<T>
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Action`1
  parent: System
  isExternal: true
  name: Action<T>
  fullName: System.Action<T>
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
